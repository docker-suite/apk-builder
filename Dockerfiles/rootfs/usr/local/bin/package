#!/usr/bin/env bash

# shellcheck disable=SC1091
source /usr/local/lib/bash-logger.sh && LOG_RESET

# set -e : Exit the script if any statement returns a non-true return value.
# set -u : Exit the script when using uninitialised variable.
set -eu

# ------------------------------------------------------------------------------
#
#   Build packages
#
# ------------------------------------------------------------------------------


# List of all packages
packages="$(find . -name '*' \( -type d -o -type l \) -mindepth 1 -maxdepth 1 -exec test -e '{}/APKBUILD' \; -print | sort -u)"

# Variables
declare force=0

# Check for a list of packages to build
while [[ $# -gt 0 ]]; do
    # help
    if [[ "$1" = "-h" ]] || [[ "$1" = "--help" ]]; then
        echo "Build script"
        echo ""
        echo "Script for building Alpine packages"
        echo ""
        echo "SYNOPSIS:"
        echo "  package [<options>]"
        echo ""
        echo "OPTIONS:"
        echo "  -h, --help         Display this help."
        echo "  -p, --package     'package_name...'"
        echo "  -f, --force       'Force package build'"
        exit 0;
    fi

    # packages
    if [[ "$1" = "-p" ]] || [[ "$1" = "--packages" ]]; then
        packages=""
        for package in ${2}; do
            packages="$packages $package"
        done
    fi

    # force
    if [[ "$1" = "-f" ]] || [[ "$1" = "--force" ]]; then
        force=1
    fi

    shift
done

# Get real path of each package
package_temp=$packages; packages=""
for package in $package_temp; do
    # Test if the package is a symlink to a directory
    if [[ -L "$package" && -d "$package" ]]; then
        package=$(readlink -f "$package")
    fi
    # package should be a directory
    if [[ -d "$package" ]]; then
        packages="$packages $(realpath "$package")"
        DEBUG "Package $(basename "$package") will be build."
    else
        WARNING "Package '$package' does not exist"
    fi
done

# Function to search for package dependencies
find_dependencies() {
    local package="${1}"
    local dependencies=""
    DEBUG "Searching for '$(basename "$package")' dependencies..."
    # Search for all folders containing APKBUILD file
    dependencies="$(find "$package" -name '*'  \( -type d -o -type l \) -mindepth 1 -maxdepth 1 -exec test -e '{}/APKBUILD' \; -print | sort -u)"
    # Iterate throw all dependencies
    for dependency in $dependencies; do
        DEBUG "Found '$(basename "$dependency")' as '$(basename "$package")' dependency"
        # Test if the dependency is a symlink to a directory
        if [[ -L "$dependency" && -d "$dependency" ]]; then
            dependency=$(readlink -f "$dependency")
        fi
        # dependency should be a directory
        if [[ -d "$dependency" ]]; then
            # Add dependency as a package to build
            packages="$dependency $packages"
            # Search for depedencies of the dependency
            find_dependencies "$dependency"
        else
            WARNING "Package '$package' does not exist"
        fi
    done
}

# Search for packages dependencies
for package in $packages; do
    find_dependencies "$package"
done

# Remove duplicate package in the right order
# to prevent from building the same package multiple times
packages=$(echo "$packages"  | awk -v RS="[ \n]+" '!n[$0]++')

# Build packages
for package in $packages; do

    # Check if package exits
    if [[ -n "$(apk search "$(basename "$package")" -e)" && $force -eq 0 ]]; then
        NOTICE "Package $(basename "$package") already exists. Skipping it."

    # Build package
    elif  [[ -d "$package" ]]; then
        NOTICE "Building package : $(basename "$package")"

        ## Move to the package to build
        cd "$package"

        ## Get package parent folder
        parent="$(dirname "$package")"
        parent="${parent#/packages/}"

        # Force generated packages to be store in /public folder
        if [[ ! "$parent" = "" ]] && [[ ! -a "/home/$USER/$parent" ]]; then
            ln -s "/public/v${ALPINE_VERSION}/" "/home/$USER/$parent"
        fi

        # Update repository indexes
        DEBUG "apk update : $(basename "$package")"
        sudo -E apk update

        # Clean pkgdir and srcdir
        DEBUG "abuild clean : $(basename "$package")"
        abuild clean

        # Generate checksum to be included in APKBUILD
        DEBUG "abuild checksum : $(basename "$package")"
        abuild checksum

        # Install packages listed in makedepends and depends
        DEBUG "abuild deps : $(basename "$package")"
        abuild deps

        # Remove existing index has it will be generated later
        DEBUG "remove-index : $(basename "$package")"
        remove-index

        # Build from APKBUILD
        # -r Install missing dependencies from system repository (using sudo)
        # -K Keep buildtime temp dirs and files (srcdir/pkgdir/deps)
        DEBUG "abuild -v -r -K -P "/home/$USER" : $(basename "$package")"
        abuild -r -K -P "/home/$USER"

        # Generate index with trusted signature
        DEBUG "generate-index : $(basename "$package")"
        generate-index

        # Remove binary packages except current version
        DEBUG "abuild cleanoldpkg : $(basename "$package")"
        abuild cleanoldpkg
    fi
done

# Regenerate index with trusted signature
DEBUG "generate-index"
generate-index
